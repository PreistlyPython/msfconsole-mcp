Help on class ClientSession in module mcp.client.session:

class ClientSession(mcp.shared.session.BaseSession)
 |  ClientSession(read_stream: anyio.streams.memory.MemoryObjectReceiveStream[mcp.types.JSONRPCMessage | Exception], write_stream: anyio.streams.memory.MemoryObjectSendStream[mcp.types.JSONRPCMessage], read_timeout_seconds: datetime.timedelta | None = None) -> None
 |  
 |  Method resolution order:
 |      ClientSession
 |      mcp.shared.session.BaseSession
 |      contextlib.AbstractAsyncContextManager
 |      abc.ABC
 |      typing.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, read_stream: anyio.streams.memory.MemoryObjectReceiveStream[mcp.types.JSONRPCMessage | Exception], write_stream: anyio.streams.memory.MemoryObjectSendStream[mcp.types.JSONRPCMessage], read_timeout_seconds: datetime.timedelta | None = None) -> None
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  async call_tool(self, name: str, arguments: dict | None = None) -> mcp.types.CallToolResult
 |      Send a tools/call request.
 |  
 |  async complete(self, ref: mcp.types.ResourceReference | mcp.types.PromptReference, argument: dict) -> mcp.types.CompleteResult
 |      Send a completion/complete request.
 |  
 |  async get_prompt(self, name: str, arguments: dict[str, str] | None = None) -> mcp.types.GetPromptResult
 |      Send a prompts/get request.
 |  
 |  async initialize(self) -> mcp.types.InitializeResult
 |  
 |  async list_prompts(self) -> mcp.types.ListPromptsResult
 |      Send a prompts/list request.
 |  
 |  async list_resources(self) -> mcp.types.ListResourcesResult
 |      Send a resources/list request.
 |  
 |  async list_tools(self) -> mcp.types.ListToolsResult
 |      Send a tools/list request.
 |  
 |  async read_resource(self, uri: pydantic.networks.AnyUrl) -> mcp.types.ReadResourceResult
 |      Send a resources/read request.
 |  
 |  async send_ping(self) -> mcp.types.EmptyResult
 |      Send a ping request.
 |  
 |  async send_progress_notification(self, progress_token: str | int, progress: float, total: float | None = None) -> None
 |      Send a progress notification.
 |  
 |  async send_roots_list_changed(self) -> None
 |      Send a roots/list_changed notification.
 |  
 |  async set_logging_level(self, level: Literal['debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency']) -> mcp.types.EmptyResult
 |      Send a logging/setLevel request.
 |  
 |  async subscribe_resource(self, uri: pydantic.networks.AnyUrl) -> mcp.types.EmptyResult
 |      Send a resources/subscribe request.
 |  
 |  async unsubscribe_resource(self, uri: pydantic.networks.AnyUrl) -> mcp.types.EmptyResult
 |      Send a resources/unsubscribe request.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  __annotations__ = {}
 |  
 |  __orig_bases__ = (mcp.shared.session.BaseSession[mcp.types.ClientR...y...
 |  
 |  __parameters__ = ()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from mcp.shared.session.BaseSession:
 |  
 |  async __aenter__(self)
 |      Return `self` upon entering the runtime context.
 |  
 |  async __aexit__(self, exc_type, exc_val, exc_tb)
 |      Raise any exception triggered within the runtime context.
 |  
 |  async send_notification(self, notification: ~SendNotificationT) -> None
 |      Emits a notification, which is a one-way message that does not expect
 |      a response.
 |  
 |  async send_request(self, request: ~SendRequestT, result_type: type[~ReceiveResultT]) -> ~ReceiveResultT
 |      Sends a request and wait for a response. Raises an McpError if the
 |      response contains an error.
 |      
 |      Do not use this method to emit notifications! Use send_notification()
 |      instead.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from mcp.shared.session.BaseSession:
 |  
 |  incoming_messages
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from contextlib.AbstractAsyncContextManager:
 |  
 |  __class_getitem__ = GenericAlias(...) from abc.ABCMeta
 |      Represent a PEP 585 generic type
 |      
 |      E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).
 |  
 |  __subclasshook__(C) from abc.ABCMeta
 |      Abstract classes can override this to customize issubclass().
 |      
 |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
 |      It should return True, False or NotImplemented.  If it returns
 |      NotImplemented, the normal algorithm is used.  Otherwise, it
 |      overrides the normal algorithm (and the outcome is cached).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from contextlib.AbstractAsyncContextManager:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |  
 |  __init_subclass__(*args, **kwargs) from abc.ABCMeta
 |      This method is called when a class is subclassed.
 |      
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.

