    # Check if Metasploit is installed
    if not await check_metasploit_installed(ctx):
        return "Metasploit Framework not found. Please ensure it is installed."
    
    if not query:
        return "Please provide a search query."
        
    # Run the search command
    command = f"search {query}"
    result = await msf_service.run_command(command, ctx)
    
    if result["success"]:
        return f"Search results for '{query}':\n\n{result['stdout']}"
    else:
        error_msg = result.get("error", "Unknown error")
        return f"Failed to search for modules: {error_msg}"

# MCP Tool: List and manage workspaces
@mcp.tool()
async def manage_workspaces(ctx=None, command: str = "list", workspace_name: str = "") -> str:
    """
    List and manage Metasploit workspaces.
    
    Args:
        command: Action to perform (list, add, delete, select)
        workspace_name: Name of the workspace for add/delete/select actions
    
    Returns:
        Result of the workspace operation
    """
    # Check if Metasploit is installed
    if not await check_metasploit_installed(ctx):
        return "Metasploit Framework not found. Please ensure it is installed."
    
    # Check database status
    db_status = await msf_service.check_db_status(ctx)
    if not db_status["success"] or not db_status.get("db_connected", False):
        return "Database is not connected. Workspaces require a connected database."
    
    # Prepare the command
    if command == "list":
        msf_command = "workspace"
    elif command == "add" and workspace_name:
        msf_command = f"workspace -a {workspace_name}"
    elif command == "delete" and workspace_name:
        msf_command = f"workspace -d {workspace_name}"
    elif command == "select" and workspace_name:
        msf_command = f"workspace {workspace_name}"
    else:
        return "Invalid workspace command. Use 'list', 'add', 'delete', or 'select'."
    
    # Run the command
    result = await msf_service.run_command(msf_command, ctx)
    
    if result["success"]:
        if command == "list":
            return f"Available workspaces:\n\n{result['stdout']}"
        elif command == "add":
            return f"Workspace '{workspace_name}' added.\n\n{result['stdout']}"
        elif command == "delete":
            return f"Workspace '{workspace_name}' deleted.\n\n{result['stdout']}"
        elif command == "select":
            return f"Switched to workspace '{workspace_name}'.\n\n{result['stdout']}"
    else:
        error_msg = result.get("error", "Unknown error")
        return f"Failed to {command} workspace: {error_msg}"


# MCP Tool: Run a scan
@mcp.tool()
async def run_scan(ctx=None, scan_type: str = "ping", target: str = "", options: str = "") -> str:
    """
    Run a scan against target hosts.
    
    Args:
        scan_type: Type of scan (ping, port, service, vuln)
        target: Target IP address, range, or subnet (e.g., '192.168.1.1', '192.168.1.0/24')
        options: Additional options for the scan
    
    Returns:
        Scan results
    """
    # Check if Metasploit is installed
    if not await check_metasploit_installed(ctx):
        return "Metasploit Framework not found. Please ensure it is installed."
    
    if not target:
        return "Please provide a target for the scan."
    
    # Choose scan module based on scan_type
    scan_module = ""
    if scan_type == "ping":
        scan_module = "auxiliary/scanner/discovery/arp_sweep"
    elif scan_type == "port":
        scan_module = "auxiliary/scanner/portscan/tcp"
    elif scan_type == "service":
        scan_module = "auxiliary/scanner/discovery/udp_sweep"
    elif scan_type == "vuln":
        scan_module = "auxiliary/scanner/smb/smb_ms17_010"
    else:
        return f"Unknown scan type: {scan_type}. Available types: ping, port, service, vuln"
    
    # Prepare the command
    cmd_parts = [
        f"use {scan_module}",
        f"set RHOSTS {target}"
    ]
    
    # Add any additional options
    if options:
        option_pairs = options.split()
        for pair in option_pairs:
            if '=' in pair:
                key, value = pair.split('=', 1)
                cmd_parts.append(f"set {key} {value}")
    
    cmd_parts.append("run")
    command = "; ".join(cmd_parts)
    
    # Run the command
    result = await msf_service.run_command(command, ctx)
    
    if result["success"]:
        return f"Scan results for {target} using {scan_module}:\n\n{result['stdout']}"
    else:
        error_msg = result.get("error", "Unknown error")
        return f"Failed to run scan: {error_msg}"

# MCP Tool: Database management
@mcp.tool()
async def manage_database(ctx=None, command: str = "status") -> str:
    """
    Manage the Metasploit database.
    
    Args:
        command: Database command (status, hosts, services, vulns, creds, loot, notes)
    
    Returns:
        Result of the database operation
    """
    # Check if Metasploit is installed
    if not await check_metasploit_installed(ctx):
        return "Metasploit Framework not found. Please ensure it is installed."
    
    valid_commands = ["status", "hosts", "services", "vulns", "creds", "loot", "notes"]
    if command not in valid_commands:
        return f"Invalid database command. Valid commands: {', '.join(valid_commands)}"
    
    # Map command to MSF command
    msf_command = ""
    if command == "status":
        msf_command = "db_status"
    elif command == "hosts":
        msf_command = "hosts"
    elif command == "services":
        msf_command = "services"
    elif command == "vulns":
        msf_command = "vulns"
    elif command == "creds":
        msf_command = "creds"
    elif command == "loot":
        msf_command = "loot"
    elif command == "notes":
        msf_command = "notes"
    
    # Run the command
    result = await msf_service.run_command(msf_command, ctx)
    
    if result["success"]:
        output = f"Database {command} command results:\n\n{result['stdout']}"
        
        # Add parsed results if available
        if command == "hosts" and "hosts" in result:
            output += f"\n\nParsed hosts:\n{json.dumps(result['hosts'], indent=2)}"
        elif command == "services" and "services" in result:
            output += f"\n\nParsed services:\n{json.dumps(result['services'], indent=2)}"
        elif command == "vulns" and "vulnerabilities" in result:
            output += f"\n\nParsed vulnerabilities:\n{json.dumps(result['vulnerabilities'], indent=2)}"
        
        return output
    else:
        error_msg = result.get("error", "Unknown error")
        return f"Failed to execute database command: {error_msg}"


# MCP Tool: Session management
@mcp.tool()
async def manage_sessions(ctx=None, command: str = "list", session_id: str = "") -> str:
    """
    List and manage Metasploit sessions.
    
    Args:
        command: Session command (list, interact, kill)
        session_id: ID of the session for interact/kill commands
    
    Returns:
        Result of the session operation
    """
    # Check if Metasploit is installed
    if not await check_metasploit_installed(ctx):
        return "Metasploit Framework not found. Please ensure it is installed."
    
    valid_commands = ["list", "interact", "kill"]
    if command not in valid_commands:
        return f"Invalid session command. Valid commands: {', '.join(valid_commands)}"
    
    # Map command to MSF command
    msf_command = ""
    if command == "list":
        msf_command = "sessions -l"
    elif command == "interact" and session_id:
        msf_command = f"sessions -i {session_id}"
    elif command == "kill" and session_id:
        msf_command = f"sessions -k {session_id}"
    else:
        return "Invalid command or missing session ID."
    
    # Run the command
    result = await msf_service.run_command(msf_command, ctx)
    
    if result["success"]:
        if command == "list":
            if "sessions" in result:
                output = f"Active sessions:\n\n{result['stdout']}\n\n"
                output += f"Parsed sessions:\n{json.dumps(result['sessions'], indent=2)}"
                return output
            else:
                return f"Active sessions:\n\n{result['stdout']}"
        elif command == "interact":
            return f"Session {session_id} interaction:\n\n{result['stdout']}"
        elif command == "kill":
            return f"Session {session_id} killed:\n\n{result['stdout']}"
    else:
        error_msg = result.get("error", "Unknown error")
        return f"Failed to {command} session: {error_msg}"


# MCP Tool: Generate payload with msfvenom
@mcp.tool()
async def generate_payload(ctx=None, payload: str = "", options: str = "") -> str:
    """
    Generate a payload using msfvenom.
    
    Args:
        payload: Payload type (e.g., 'windows/meterpreter/reverse_tcp')
        options: Additional options (e.g., 'LHOST=192.168.1.1 LPORT=4444 -f exe')
    
    Returns:
        Generated payload or command output
    """
    # Check if Metasploit is installed
    if not await check_metasploit_installed(ctx):
        return "Metasploit Framework not found. Please ensure it is installed."
    
    if not payload:
        return "Please provide a payload type."
    
    # Prepare the msfvenom command parameters
    params = ["-p", payload]
    
    # Add any additional options
    if options:
        option_parts = shlex.split(options)
        params.extend(option_parts)
    
    # Run msfvenom
    result = await msf_service.run_msfvenom(params, ctx)
    
    if result["success"]:
        output = f"Payload generation successful:\n\n"
        output += result["stdout"]
        
        if result["stderr"]:
            output += f"\nWarnings/Info:\n{result['stderr']}"
            
        return output
    else:
        error_msg = result.get("stderr", result.get("error", "Unknown error"))
        return f"Failed to generate payload: {error_msg}"


# MCP Tool: Show module information
@mcp.tool()
async def show_module_info(ctx=None, module_path: str = "") -> str:
    """
    Show detailed information about a Metasploit module.
    
    Args:
        module_path: Full path to the module (e.g., 'exploit/windows/smb/ms17_010_eternalblue')
    
    Returns:
        Module information
    """
    # Check if Metasploit is installed
    if not await check_metasploit_installed(ctx):
        return "Metasploit Framework not found. Please ensure it is installed."
    
    if not module_path:
        return "Please provide a module path."
    
    # Validate module path
    if msf_service._validate_command(f"use {module_path}"):
        # Build command
        command = f"use {module_path}; info"
        
        # Run the command
        result = await msf_service.run_command(command, ctx)
        
        if result["success"]:
            return f"Module information for {module_path}:\n\n{result['stdout']}"
        else:
            error_msg = result.get("error", "Unknown error")
            return f"Failed to get module information: {error_msg}"
    else:
        return f"Invalid or disallowed module path: {module_path}"

# MCP Tool: Browse documentation
@mcp.tool()
async def browse_documentation(ctx=None, document_name: str = "") -> str:
    """
    Browse and view documentation files.
    
    Args:
        document_name: Name of the document to view (leave empty to list available docs)
    
    Returns:
        Documentation content or list of available documents
    """
    # Use SafeContext wrapper for robust error handling
    safe_ctx = SafeContext(ctx)
    
    await safe_ctx.info(f"Accessing documentation: {document_name if document_name else 'index'}")
    
    # If no specific document is requested, list available docs
    if not document_name:
        return list_available_docs()
    
    # If a specific document is requested
    return get_document_content(document_name)

# MCP Tool: List all available commands
@mcp.tool()
async def list_mcp_commands(ctx=None) -> str:
    """
    List all available commands and tools in this MCP.
    
    Returns:
        Formatted list of commands with descriptions
    """
    # Use SafeContext wrapper for robust error handling
    safe_ctx = SafeContext(ctx)
    
    await safe_ctx.info("Listing available commands")
        
    return list_commands()

# Main function to run the server
if __name__ == "__main__":
    logger.info(f"Starting Metasploit Framework Console MCP v{VERSION}")
    
    # Check if msfconsole is available
    if not os.path.exists(CONFIG["metasploit"]["msfconsole_path"]):
        logger.error(f"msfconsole not found at {CONFIG['metasploit']['msfconsole_path']}")
        print(f"Error: msfconsole not found at {CONFIG['metasploit']['msfconsole_path']}")
        print("Please install Metasploit Framework or update the config with the correct path.")
        sys.exit(1)
    
    # Print configuration information
    print(f"Starting Metasploit Console MCP server v{VERSION}")
    print(f"Using msfconsole at: {CONFIG['metasploit']['msfconsole_path']}")
    print(f"Using msfvenom at: {CONFIG['metasploit']['msfvenom_path']}")
    print(f"Current workspace: {CONFIG['metasploit']['workspace']}")
    
    try:
        # Run the server
        mcp.run()
    except KeyboardInterrupt:
        print("\nShutting down Metasploit Console MCP server...")
        sys.exit(0)
    except Exception as e:
        logger.error(f"Error running MCP server: {e}")
        print(f"Error: {e}")
        sys.exit(1)
